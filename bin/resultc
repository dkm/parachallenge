#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#   parachallenge
#   Copyright (C) 2010  Marc Poulhi√®s
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

import parachallenge

import sys
import os
import os.path
from Cheetah.Template import Template
import json
import datetime

# copy from parachallenge
LTF1_ENA = 1
LTF12_ENB = 2
LTF2_ENC = 3
LTF23_END = 4

fiches_fin = open(sys.argv[2], "r")

fiches = {}

wing_cert = {LTF1_ENA : 0.20,
             LTF12_ENB : 0.00,
             LTF2_ENC : -0.10,
             LTF23_END : -0.30}

group_bonus = 0.05

for fiche in fiches_fin.xreadlines():
    fpath = fiche.strip()
    f = parachallenge.loadFichesFromIni(fpath)
    fiches[f.fid] = f

fiches_fin.close()

print "Found %d fiches" % len(fiches)

decls = []
for decl_filename in os.listdir(sys.argv[1]):
    decl_filepath = os.path.join(sys.argv[1], decl_filename)
    d = parachallenge.loadDeclarationFromIni(decl_filepath, fiches)
    decls.append(d)

print "Found %d declarations." % len(decls)

pilots = {}

for d in decls:
    if d.pilot in pilots:
        pilot = pilots[d.pilot]
    else:
        pilot = parachallenge.Pilot(d.pilot)
        pilots[d.pilot] = pilot

    pilot.points += d.points * (1 + wing_cert[d.cat] + d.group*group_bonus)
    pilot.distance += d.distance

sorted_pilots = sorted(pilots.values(), key=lambda pilot: pilot.points)

t = Template(file='templates/results.cheetah')
sorted_pilots.reverse()
t.pilots = sorted_pilots
# GMT + 1.
t.date = (datetime.datetime.today() - datetime.timedelta(0,3600,0)).strftime("%d/%m/%Y %H:%M")
resout = open("final/results.html", "w")
print >>resout, t
resout.close()

json_pilots = json.dumps(sorted_pilots, indent=3, 
                         cls=parachallenge.ParachallengeEncoder)
json_out = open("final/pilots.json", "w")
print >>json_out, json_pilots
json_out.close()


json_decls = json.dumps(decls, indent=3, 
                        cls=parachallenge.ParachallengeEncoder)
json_out = open("final/declarations.json", "w")
print >>json_out, json_decls
json_out.close()



